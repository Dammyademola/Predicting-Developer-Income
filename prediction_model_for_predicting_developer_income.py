{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nnewCoderSurvey = pd.read_csv(\"../input/2021-freecodecamp-new-coder-survey/2021 New Coder Survey.csv\")\n\ndf_survey = pd.DataFrame(columns=['How many months have you been programming?', 'Are you already employed as a developer, is this your first software development job?', 'Highest degree or level of school you have completed?', 'Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?', 'Are you willing to relocate for a job?', 'How old are you?', 'How many people live in your city?', 'Income'])\n\ndf_survey['How many months have you been programming?'] = newCoderSurvey.iloc[:, 8]\ndf_survey['Are you already employed as a developer, is this your first software development job?'] = newCoderSurvey.iloc[:, 11]\ndf_survey['Highest degree or level of school you have completed?'] = newCoderSurvey.iloc[:, 32]\ndf_survey['Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?'] = newCoderSurvey.iloc[:, 34]\ndf_survey['Are you willing to relocate for a job?'] = newCoderSurvey.iloc[:, 19]\ndf_survey['How old are you?'] = newCoderSurvey.iloc[:, 23]\ndf_survey['How many people live in your city?'] = newCoderSurvey.iloc[:, 28]\ndf_survey['Income'] = newCoderSurvey.iloc[:, 22]\n\ndf_survey.dtypes\n\ndf_survey.isnull().sum()\n\ndf_survey.duplicated().sum()\n\ndf_survey = df_survey.drop_duplicates()\n\ndf_survey.duplicated().sum()\n\ndef convert_months_to_years(df_survey):\n    df_copy = df_survey.copy()\n    df_copy['How many years have you been programming?'] = df_copy['How many months have you been programming?'] / 12\n    df_survey = df_copy.drop(columns=['How many months have you been programming?'])\n    return df_survey\n\n#Column 1\ndf_survey['How many months have you been programming?'].fillna(df_survey['How many months have you been programming?'].median(),inplace = True)\n\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"99999999999999999999999999999999999999999\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"+24\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"+40\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"+5\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"1200\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"4800\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"5000\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"1500\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"1973\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"9000\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != \"1000\"]\ndf_survey = df_survey[df_survey[\"How many months have you been programming?\"] != 2400]\n\ndf_survey['How many months have you been programming?'] = df_survey['How many months have you been programming?'].replace(['000'],['0'])\n\ndf_survey['How many months have you been programming?'] = df_survey['How many months have you been programming?'].astype(float)\n\ndf_survey['How many months have you been programming?'] = df_survey['How many months have you been programming?'].astype(int)\n\ndf_survey = convert_months_to_years(df_survey)\n\n#Column 2\ndf_survey['Are you already employed as a developer, is this your first software development job?'].fillna(df_survey['Are you already employed as a developer, is this your first software development job?'].mode()[0],inplace = True)\n\n#Column 3\ndf_survey['Highest degree or level of school you have completed?'] = df_survey['Highest degree or level of school you have completed?'].replace(['Some college credit, no degree','Some high school','No high school (secondary school)'],['High school diploma or equivalent (GED)','Secondary school','Secondary school'])\ndf_survey['Highest degree or level of school you have completed?'] = df_survey['Highest degree or level of school you have completed?'].replace([\"Professional degree (MBA, MD, JD, etc.)\", \"Master's degree (non-professional)\", \"High school diploma or equivalent (GED)\", \"Trade, technical, or vocational training\"],['Professional Degree', 'Master Degree', 'High school diploma', 'Trade/Technical/Vocational'])\ndf_survey['Highest degree or level of school you have completed?'].fillna(df_survey['Highest degree or level of school you have completed?'].mode()[0],inplace = True)\n\n#Column 4\ndf_survey['Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?'].fillna(df_survey['Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?'].mode()[0],inplace = True)\n\n#Column 5\ndf_survey['Are you willing to relocate for a job?'] = df_survey['Are you willing to relocate for a job?'].replace(['I am not interested in a software development career'],['No'])\n\ndf_survey['Are you willing to relocate for a job?'].fillna(df_survey['Are you willing to relocate for a job?'].mode()[0],inplace = True)\n\n#Column 6\n\ndf_survey['How old are you?'].fillna(df_survey['How old are you?'].median(),inplace = True)\n\ndf_survey['How old are you?'] = df_survey['How old are you?'].astype(int)\n\n#Column 7\n\ndf_survey['How many people live in your city?'].fillna(df_survey['How many people live in your city?'].mode()[0],inplace = True)\n\n#Column 8\ndf_survey = df_survey[df_survey[\"Income\"] != 'I donâ€™t know']\ndf_survey = df_survey[df_survey[\"Income\"] != \"I don't want to answer\"]\ndf_survey = df_survey[df_survey[\"Income\"] != 'None']\n\ndf_survey['Income'].fillna(df_survey['Income'].mode()[0],inplace = True)\n\nfrom sklearn.preprocessing import OrdinalEncoder\nincome_level_order = [['Under $1,000', '$1,000 to $2,999', '$3,000 to $4,999', '$5,000 to $6,999', '$7,000 to $9,999', '$10,000 to $14,999', '$15,000 to $19,999','$20,000 to $24,999','$25,000 to $29,999','$30,000 to $34,999', '$35,000 to $39,999','$40,000 to $49,999','$50,000 to $59,999','$60,000 to $74,999','$75,000 to $89,999','$90,000 to $119,999','$120,000 to $159,999','$160,000 to $199,999', '$200,000 to $249,999','$250,000 or over',]] \nfrom sklearn.preprocessing import OrdinalEncoder\nIncomeencoder = OrdinalEncoder(categories = income_level_order)  \ndf_survey['IncomeLevel'] = Incomeencoder.fit_transform(df_survey[['Income']])\n\ndf_survey.isnull().sum()\n\ndf_survey['HighIncome'] = df_survey['IncomeLevel'].apply(lambda x:0 if x < 9 else 1)\n\ndf_survey['How old are you?'].plot(kind='box')\n\nz_scores = (df_survey - df_survey.mean()) / df_survey.std()\ndf_survey = df_survey[np.abs(z_scores['How old are you?']) < 9]\ndf_survey = df_survey[df_survey['How old are you?'] != 12]\ndf_survey = df_survey[df_survey['How old are you?'] != 11]\ndf_survey = df_survey[df_survey['How old are you?'] != 9]\ndf_survey = df_survey[df_survey['How old are you?'] != 8]\ndf_survey = df_survey[df_survey['How old are you?'] != 7]\n\nbins = [0, 18, 25, 35, 50, 90]\nlabels = ['0-18', '19-25', '26-35', '36-50', '90-100']\n\ndf_survey['age_category'] = pd.cut(df_survey['How old are you?'], bins=bins, labels=labels)\n\ndata = pd.DataFrame(df_survey['How many years have you been programming?'])\ngraph = data.plot(kind='box')\ngraph.set_ylabel('Value')\nplt.show()\n\ndata = pd.DataFrame(df_survey['Are you already employed as a developer, is this your first software development job?'])\nvalue_counts = data['Are you already employed as a developer, is this your first software development job?'].value_counts()\n\ngraph = value_counts.plot(kind='pie', autopct='%1.1f%%')\ngraph.legend(value_counts.index.map(str))\ngraph.set_ylabel('')\nplt.show()\n\ndf_survey['Are you already employed as a developer, is this your first software development job?'].describe()\n\ndata = pd.DataFrame(df_survey['Highest degree or level of school you have completed?'])\nvalue_counts = data['Highest degree or level of school you have completed?'].value_counts()\n\ngraph = value_counts.plot(kind='barh')\ngraph.set_xlabel('Count')\ngraph.set_ylabel('Category')\n\nplt.show()\n\ndata = pd.DataFrame(df_survey['Highest degree or level of school you have completed?'])\nvalue_counts = data['Highest degree or level of school you have completed?'].value_counts()\ngraph = value_counts.plot(kind='pie', autopct='%1.1f%%')\ngraph.set_ylabel('')\nplt.show()\n\ndata = pd.DataFrame(df_survey['Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?'])\nvalue_counts = data['Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?'].value_counts()#\n\ngraph = value_counts.plot(kind='pie', autopct='%1.1f%%')\ngraph.legend(value_counts.index.map(str))\ngraph.set_ylabel('Currently attending an educational institution')\nplt.show()\n\nplt.figure(figsize=(20, 11))\nax = sns.countplot(data=df_survey, x='age_category', hue=\"Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?\")\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\nplt.figure(figsize=(20, 11))\nax = sns.barplot(data=df_survey, x='age_category', y=\"IncomeLevel\", hue=\"Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?\", ci=None, estimator=max)\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\ndata = pd.DataFrame(df_survey['Are you willing to relocate for a job?'])\nvalue_counts = data['Are you willing to relocate for a job?'].value_counts()\n\ngraph = value_counts.plot(kind='barh')\ngraph.set_xlabel('Count')\ngraph.set_ylabel('Are you willing to relocate for a job?')\n\nplt.show()\n\ndata = pd.DataFrame(df_survey['Are you willing to relocate for a job?'])\nvalue_counts = data['Are you willing to relocate for a job?'].value_counts()\n\ngraph = value_counts.plot(kind='pie', autopct='%1.1f%%')\ngraph.legend(value_counts.index.map(str))\ngraph.set_ylabel('Are you willing to relocate for a job?')\nplt.show()\n\ndata = pd.DataFrame(df_survey['How old are you?'])\ndata.plot(kind='box')\n\ndata = pd.DataFrame(df_survey['How many people live in your city?'])\nvalue_counts = data['How many people live in your city?'].value_counts()\n\ngraph = value_counts.plot(kind='barh')\ngraph.set_xlabel('Count')\ngraph.set_ylabel('Category')\n\nplt.show()\n\ndata = pd.DataFrame(df_survey['How many people live in your city?'])\nvalue_counts = data['How many people live in your city?'].value_counts()\n\ngraph = value_counts.plot(kind='pie', autopct='%1.1f%%')\ngraph.set_ylabel('')\nplt.show()\n\nsns.countplot(y=df_survey['Income'], data=df_survey)\nplt.xlabel(\"count\")\nplt.ylabel(\"income\")\nplt.show()\n\nplt.figure(figsize=(20, 11))\nax = sns.barplot(data=df_survey, x='age_category', y='How many years have you been programming?', ci=None, estimator=max)\n\nplt.figure(figsize=(20, 11))\nsns.barplot(x='Highest degree or level of school you have completed?', y='How many years have you been programming?', hue=\"IncomeLevel\",  data=df_survey, ci=None, estimator=max)\nplt.xlabel(\"Degree\")\nplt.ylabel(\"Years programming\")\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\nplt.show()\n\ndata = {'Are you already employed as a developer, is this your first software development job?': df_survey['Are you already employed as a developer, is this your first software development job?'],\n    'How old are you?': df_survey['How old are you?'],\n       'IncomeLevel': df_survey['IncomeLevel']}\n\ndf = pd.DataFrame(data)\n\nsns.catplot(x='How old are you?', y='Are you already employed as a developer, is this your first software development job?', hue=\"IncomeLevel\", kind='bar', data=df, height=6, aspect=1.5, ci=None, estimator=max)\n\nplt.xlabel(\"Age\")\nplt.ylabel(\"Employed as a developer, First developer job?\")\nplt.show()\n\nmyOrdinalEncoder = {\"No\":0 , \"Yes\":1}\n\ncluster_data = df_survey\ncluster_data[\"Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?\"] = cluster_data[\"Are you currently a student attending or enrolled in regular school, that is in an elementary school, a middle school, a high school, a college, or a graduate school?\"].replace(myOrdinalEncoder)\n\ncluster_data = pd.get_dummies(cluster_data,columns = ['Highest degree or level of school you have completed?', 'Are you already employed as a developer, is this your first software development job?', 'Are you willing to relocate for a job?', 'How many people live in your city?']).groupby(cluster_data.index, as_index=False).max()\n\ndel cluster_data['age_category']\ndel cluster_data['Income']\n\nKMeans_cluster1 = cluster_data[['How old are you?','How many years have you been programming?', 'IncomeLevel', 'HighIncome']]\n\nfrom sklearn.cluster import KMeans\nkm = KMeans(n_clusters=4,init='random', \n            n_init=10,  \n            tol=1e-04,\n            random_state=0)\ny_cluster = km.fit_predict(cluster_data)\nKMeans_cluster1['ClusterLabel'] = y_cluster\n\nsns.scatterplot(data=KMeans_cluster1,y=\"How old are you?\", x=\"How many years have you been programming?\", hue=\"ClusterLabel\")\n\nsns.scatterplot(data=KMeans_cluster1,y=\"How old are you?\", x=\"IncomeLevel\", hue=\"ClusterLabel\")\n\nplt.figure(figsize=(10, 6))\nsns.countplot(data=KMeans_cluster1, x=\"HighIncome\", hue=\"ClusterLabel\")\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\nplt.figure(figsize=(10, 6))\nsns.countplot(data=KMeans_cluster1, x=\"IncomeLevel\", hue=\"ClusterLabel\")\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\nplt.figure(figsize=(10, 6))\nax = sns.countplot(data=KMeans_cluster1, x=\"ClusterLabel\" ,hue='How old are you?')\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\nplt.figure(figsize=(10, 10))\nKMeans_cluster1['How many years have you been programming?'] = KMeans_cluster1['How many years have you been programming?'].astype(int)\nax = sns.countplot(data=KMeans_cluster1, x=\"ClusterLabel\" ,hue='How many years have you been programming?',)\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=4)\n\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\nKElbowVisualisermodel = KMeans()\nKElbowVisualiser = KElbowVisualizer(KElbowVisualisermodel, k=(2,10))\nKElbowVisualiser.fit(KMeans_cluster1)\nKElbowVisualiser.show()\n\nfrom yellowbrick.cluster import SilhouetteVisualizer \n\nfor kvalue in range(2,10):\n    Skm =  KMeans(kvalue, random_state=1,tol=1e-04,)\n    Svisualizer = SilhouetteVisualizer(Skm, colors='yellowbrick')\n\n    Svisualizer.fit(KMeans_cluster1)\n    Svisualizer.show()\n    print(Svisualizer.silhouette_score_)\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score, learning_curve, validation_curve\nimport sklearn.model_selection as model_selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import tree\nfrom sklearn import metrics\n\ncluster_data = cluster_data[[i for i in cluster_data if i not in ['HighIncome']] + ['HighIncome']]\nX = cluster_data.iloc[:,0:21]\ny = cluster_data.iloc[:,21]\n\nX_train,X_test,y_train,y_test = model_selection.train_test_split(X,y,test_size=0.3,random_state=4)\n\nX_train_new, X_val, y_train_new, y_val = model_selection.train_test_split(X_train, y_train, test_size=0.1, random_state=4)\n\nStand_scaler = StandardScaler()\nX_train = Stand_scaler.fit_transform(X_train)\nX_test = Stand_scaler.transform(X_test)\n\nknnModel = KNeighborsClassifier()\nknnModel.fit(X_train, y_train)\nyprediction = knnModel.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"KNN MODEL NO TUNNING\")\nplot_confusion_matrix(knnModel, X_test, y_test,cmap=plt.cm.Blues)\n\nvalidation_results_array = []\ntraining_results_array = []\n\nKNN_range = range(1, 31) \n\n\nfor kValues in KNN_range:\n    knnModel = KNeighborsClassifier(n_neighbors=kValues)\n    knnModel = knnModel.fit(X_train_new, y_train_new)\n    predictionTrainingNew = knnModel.predict(X_train_new)\n    t_score = metrics.accuracy_score(y_train_new, predictionTrainingNew) \n    training_results_array.append(t_score)\n    predictionvalue = knnModel.predict(X_val) \n    v_score = metrics.accuracy_score(y_val, predictionvalue) \n    validation_results_array.append(v_score) \n\n\nplt.plot(k_range, validation_results_array, 'b-', label='Val score')\nplt.plot(k_range, training_results_array, 'r-', label='Train score') \nplt.ylabel('Score')\nplt.xlabel('k')\nplt.legend()\nplt.grid(True)\nplt.show()\n\nknnModel = KNeighborsClassifier(n_neighbors=17)\nknnModel = knnModel.fit(X_train, y_train)\nyprediction = knnModel.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"KNN MODEL HOLD OUT\")\nplot_confusion_matrix(knnModel, X_test, y_test,cmap=plt.cm.Blues)\n\nfrom sklearn.model_selection import GridSearchCV\nknnModel = KNeighborsClassifier() \nparameterGrid = [{'weights':['uniform'], 'n_neighbors':list(range(1,30))},\n               {'weights':['distance'], 'n_neighbors':list(range(1,30))}]\n\nStand_scaler = StandardScaler()\nX_train = Stand_scaler.fit_transform(X_train)\nX_test = Stand_scaler.transform(X_test)\n\ngridSearchAlog = GridSearchCV(knnModel, parameterGrid, scoring='accuracy', cv=10)                          \n\ngridSearchAlog = gridSearchAlog.fit(X_train,y_train)\n\nknnGridSearch = gridSearchAlog.best_estimator_\n\nknnGridSearch.fit(X_train, y_train)\n\nyprediction = knnGridSearch.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"KNN MODEL GRIDSEARCH\")\nplot_confusion_matrix(knnGridSearch, X_test, y_test,cmap=plt.cm.Blues)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\n\nMinMax_scaler = MinMaxScaler()\nX_train = MinMax_scaler.fit_transform(X_train)\nX_test = MinMax_scaler.transform(X_test)\n\nlrModel = LogisticRegression()\nlrModel = lrModel.fit(X_train,y_train)\nyprediction = lrModel.predict(X_test) \nprint(\"Accuracy:\",metrics.accuracy_score(y_test, yprediction))\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"LR MODEL NO TUNNING\")\nplot_confusion_matrix(lrModel, X_test, y_test,cmap=plt.cm.Blues)\n\nfrom sklearn.model_selection import GridSearchCV\n\nlrModel = LogisticRegression()\nparameterGrid = {'penalty': [\"l2\"]}\n\ngridSearchAlog = GridSearchCV(lrModel, parameterGrid, cv=5)                          \ngridSearchAlog = gridSearchAlog.fit(X_train,y_train)\n\nprint(gridSearchAlog.best_params_)\nprint(gridSearchAlog.best_score_)\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"LR MODEL GRIDSEARCH\")\nplot_confusion_matrix(gridSearchAlog, X_test, y_test,cmap=plt.cm.Blues)\n\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\ndtModel = DecisionTreeClassifier()\ndtModel.fit(X_train, y_train)\nyprediction = dtModel.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\nprint(\"DT MODEL NO TUNNING\")\nplot_confusion_matrix(dtModel, X_test, y_test,cmap=plt.cm.Blues)\n\n\nmax_depth_range = range(1, 16)\n\nvalidation_results_array = []\ntraining_results_array = []\n\nfor k in max_depth_range:\n    dtModel = DecisionTreeClassifier(max_depth=k)\n    dtModel = dtModel.fit(X_train_new, y_train_new)\n    predictionTrainingNew = dtModel.predict(X_train_new)\n    t_score = metrics.accuracy_score(y_train_new, predictionTrainingNew) \n    training_results_array.append(t_score)\n    predictionvalue = dtModel.predict(X_val) \n    v_score = metrics.accuracy_score(y_val, predictionvalue) \n    validation_results_array.append(v_score)\n    \n    \nplt.plot(max_depth_range, validation_results_array, 'g-', label='Val score')\nplt.plot(max_depth_range, training_results_array, 'r-', label='Train score')\nplt.ylabel('Score')\nplt.xlabel('Model complexity: tree depth')\nplt.legend()\nplt.grid(True)\nplt.show()\n\ndtModel = DecisionTreeClassifier(max_depth=2)\ndtModel = dtModel.fit(X_train, y_train)\nyprediction = dtModel.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\n\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"DT MODEL HOLD OUT\")\nplot_confusion_matrix(dtModel, X_test, y_test,cmap=plt.cm.Blues)\n\nfrom sklearn.model_selection import GridSearchCV\n\ndtModel = DecisionTreeClassifier() \nparameterGrid = [{'criterion':['gini'], 'max_depth':list(range(1,16))},\n               {'criterion':['entropy'], 'max_depth':list(range(1,16))}]\n\ngridSearchAlog = GridSearchCV(dtModel, parameterGrid, scoring='accuracy', cv=10)                          \n\ngridSearchAlog = gridSearchAlog.fit(X_train,y_train)\n \ndtGridSearch = gridSearchAlog.best_estimator_\n\ndtGridSearch = dtGridSearch.fit(X_train, y_train)\n\nyprediction = dtGridSearch.predict(X_test)\nprint(metrics.accuracy_score(y_test, yprediction))\n\nfrom sklearn.metrics import plot_confusion_matrix\nprint(\"DT MODEL GRIDSEARCH\")\nplot_confusion_matrix(dtGridSearch, X_test, y_test,cmap=plt.cm.Blues)\n\nfrom sklearn.linear_model import LogisticRegression   \nfrom sklearn.tree import DecisionTreeClassifier  \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier\n\nStand_scaler = StandardScaler()\nX_train = Stand_scaler.fit_transform(X_train)\nX_test = Stand_scaler.transform(X_test)\n\ndtModel = DecisionTreeClassifier()\nknnModel = KNeighborsClassifier()\nlrModel= LogisticRegression(max_iter=10000)\nmodel_ensemble = VotingClassifier(estimators=[('dt', dtModel), ('knn', knnModel), ('lr', lrModel)], voting='hard')\n\nfrom sklearn.metrics import accuracy_score\n\ndtModel = dtModel.fit(X_train, y_train)\ny_train_pred = dtModel.predict(X_train)\ny_test_pred = dtModel.predict(X_test) \nt_score = accuracy_score(y_train, y_train_pred)\ntesting_score = accuracy_score(y_test, y_test_pred)\nprint('dtModel = train/test accuracies %.3f/%.3f' % (t_score, testing_score))\n\nknnModel = knnModel.fit(X_train, y_train)\ny_train_pred = knnModel.predict(X_train)\ny_test_pred = knnModel.predict(X_test) \nt_score = accuracy_score(y_train, y_train_pred)\ntesting_score = accuracy_score(y_test, y_test_pred)\nprint('knnModel = train/test accuracies %.3f/%.3f' % (t_score, testing_score))\n\nlrModel = lrModel.fit(X_train, y_train)\ny_train_pred = lrModel.predict(X_train)\ny_test_pred = lrModel.predict(X_test) \nt_score = accuracy_score(y_train, y_train_pred)\ntesting_score = accuracy_score(y_test, y_test_pred)\nprint('lrModel = train/test accuracies %.3f/%.3f' % (t_score, testing_score))\n\nmodel_ensemble = model_ensemble.fit(X_train, y_train)\n\ny_train_pred = model_ensemble.predict(X_train)\ny_test_pred = model_ensemble.predict(X_test) \nt_score = accuracy_score(y_train, y_train_pred)\ntesting_score = accuracy_score(y_test, y_test_pred)\nprint('Best model = train/test accuracies %.3f/%.3f' % (t_score, testing_score))","metadata":{"_uuid":"9736e687-b2c1-4122-9745-e8f4e6e212cf","_cell_guid":"b594099b-01e2-41d2-929d-7281eb2d8aea","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}